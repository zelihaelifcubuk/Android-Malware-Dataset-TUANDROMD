import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#uploading dataset
data = pd.read_csv("TUANDROMD.csv")
data = data.dropna()
x = data.iloc[:,0:-1].values
y = data.iloc[:,-1].values


#LabelEncoder() for the "Label" attribute
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)


#train-test-split for the training
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=0)


#Chi-Square Test
from sklearn.feature_selection import chi2, SelectKBest

chi2_selector = SelectKBest(chi2, k=150)  
x_train_chi2 = chi2_selector.fit_transform(x_train, y_train)
x_test_chi2 = chi2_selector.transform(x_test)

selected_features_indices = chi2_selector.get_support(indices=True)
print("Selected Features Indices:", selected_features_indices)

#Random Forest algorithm
from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=10, criterion="entropy")
rfc.fit(x_train, y_train)

y_pred = rfc.predict(x_test)


#Performance Metrics
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, mean_squared_error

cm = confusion_matrix(y_test,y_pred)
print("Confusion Matrix")
print(cm)

accuracy = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {accuracy:.2f}")

precision = precision_score(y_test, y_pred, average='weighted')
print(f"Precision: {precision:.2f}")

recall = recall_score(y_test, y_pred, average='weighted')
print(f"Recall: {recall:.2f}")

f1 = f1_score(y_test, y_pred, average='weighted')
print(f"F1-Score: {f1:.2f}")

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse:.2f}")