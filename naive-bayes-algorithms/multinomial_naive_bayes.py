import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


data = pd.read_csv("TUANDROMD.csv")
data = data.dropna()
x = data.iloc[:,0:-1].values
y = data.iloc[:,-1].values


from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)


from sklearn.feature_selection import mutual_info_classif
information_gain = mutual_info_classif(x, y)

information_gain_with_index = list(enumerate(information_gain))
sorted_information_gain = sorted(information_gain_with_index, key=lambda x: x[1], reverse=True)

for i in range(len(sorted_information_gain)):
    print("Information Gain values of all features\n")
    print(f"Feature {i+1}: {sorted_information_gain[i]}")



selected_features = sorted_information_gain[:150]
for i, (index, information_gain) in enumerate(selected_features):
    print("Selected Features\n")
    print(f"Feature {i+1} - Index: {index}, Information Gain: {information_gain}")

selected_feature_indices = [index for index, _ in selected_features]
x_selected = x[:, selected_feature_indices]



from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_selected, y, test_size=0.33, random_state=0)


from sklearn.naive_bayes import MultinomialNB

mnb = MultinomialNB()
mnb.fit(x_train, y_train)

y_pred = mnb.predict(x_test)



from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix, mean_squared_error


print("------Multinomial Naive Bayes---------------")
cm = confusion_matrix(y_test,y_pred)
print(f"Confusion Matrix\n {cm}")

accuracy = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {accuracy:.2f}")

precision = precision_score(y_test, y_pred, average='weighted')
print(f"Precision: {precision:.2f}")

recall = recall_score(y_test, y_pred, average='weighted')
print(f"Recall: {recall:.2f}")

f1 = f1_score(y_test, y_pred, average='weighted')
print(f"F1-Score: {f1:.2f}")

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse:.2f}")


from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import label_binarize

fpr, tpr, _ = roc_curve(label_binarize(y_test, classes=np.unique(y_test)), label_binarize(y_pred, classes=np.unique(y_test)))
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()